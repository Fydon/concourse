#language anatomy

\use{\load{concourse/docs}}

\template{\load{concourse/docs-template}}

\title{Worker Pools}{worker-pools}

\warn{
  This topic isn't crucial to understanding Concourse; if you're just getting
  started and have finished the \reference{installing} section, you may want to
  first move on to \reference{using-concourse}.
}

The \reference{architecture-atc}{ATC} does all of its scheduling using the pool
of \reference{architecture-worker}{workers} registered with it. There is no way
to configure the workers through the ATC itself; instead, each worker
continuously heartbeats its presence to the ATC, along with basic statistics
like how many containers it's running. To learn more about how this works, see
\reference{registering-via-tsa}.

Each worker has a \code{platform} and an optional set of \code{tags}, both of
which determine the workloads that the ATC can run on the worker. A
\reference{running-tasks}{Task} that configures its \code{platform} as
\code{linux} can only run on workers advertising the same platform. Similarly,
a step in a \reference{build-plans}{build plan} that configures
\reference{step-tags} can only run on workers matching a superset of those
tags.

A worker's \code{platform} is typically one of \code{linux}, \code{windows}, or
\code{darwin}, but this is just convention; if you have some esoteric platform
like \code{solaris} or \code{windows-16bit} or \code{super-nintendo} the same
rules apply.

A worker's \code{tags} are entirely up to you: you would configure them if you
know that the worker meets some special requirement, such as living within a
particular network or having particular hardware capabilities. If a worker
specifies \code{tags}, it is taken out of the "default" placement pool, and
steps only run on the worker if they explicitly specify a common subset of the
worker's tags, by setting \reference{step-tags}.

Each worker also advertises which resource types it supports natively. This is
just a mapping from resource type (e.g. \code{git}) to the location of the
resource's image on the worker (e.g. \code{/opt/resources/git}). You likely
won't have to configure this yourself as all official Concourse distributions
have a default set of core \reference{resource-types}{resource types} that
they'll automatically advertise, and the rest should really be configured in
your pipeline via \reference{configuring-resource-types} rather than being
added to your workers.

\table-of-contents

\section{The \code{/api/v1/workers} API}{worker-api}{
  The most direct way to see existing workers and register new ones is via the
  \code{/api/v1/workers} API endpoint provided by the ATC.

  It supports the following methods:

  \definitions{
    \item{\code{GET /api/v1/workers}}{
      List the current worker pool.
    }

    \item{\code{POST /api/v1/workers[?ttl=30s]}}{
      Register a worker, with an optional TTL.
    }
  }

  For example, to register a worker for 10 seconds:

  \codeblock{bash}{
    curl -XPOST http://192.168.100.4:8080/api/v1/workers?ttl=10s -d '\{
      "name": "image-building-box",
      "platform": "linux",
      "tags": ["hetzner"],
      "addr": "10.0.16.10:7777",
      "baggageclaim_url": "http://10.0.16.10:7788",
      "active_containers": 123,
      "resource_types": [
        \{"type": "git", "image": "/opt/concourse/resources/git"\}
      ]
    \}'
  }

  The \code{?ttl=10s} means that the worker's registration will go away in 10
  seconds. Workers should continuously heartbeat their presence, so that if/when
  they go away the TTL will expire. Note that there is currently no way to
  explicitly unregister a worker; instead you should just submit a low TTL
  (e.g.\code{1s}).

  The worker JSON object contains the following attributes:

  \define-attribute{name: string}{
    \italic{Optional.} A logical name for the worker. This should be something
    that stays the same throughout the worker's lifecycle, for example the
    \code{hostname}. If not specified, the \code{addr} is used.
  }

  \define-attribute{platform: string}{
    \italic{Required.} The platform supported by the worker, e.g. \code{linux},
    \code{darwin}, or \code{windows}.
  }

  \define-attribute{tags: [string]}{
    \italic{Optional.} A set of arbitrary tags. Only steps specifying a matching
    a subset of these tags will be placed on the worker.
  }

  \define-attribute{addr: string}{
    \italic{Required.} The address of the
    \hyperlink{https://github.com/cloudfoundry-incubator/garden}{Garden}
    server. Note that this address must be reachable by the ATC, and has no
    authentication. For this reason it should always be an address only
    reachable from within Concourse's private network. To register external
    workers, see \reference{registering-via-tsa}.
  }

  \define-attribute{baggageclaim_url: string}{
    \italic{Optional.} The API endpoint for a
    \hyperlink{https://github.com/concourse/baggageclaim}{Baggageclaim} server
    to use for caching artifacts on the worker. If not specified, caching will
    not be utilized.
  }

  \define-attribute{active_containers: integer}{
    \italic{Optional.} The number of containers currently running on the worker.
  }

  \define-attribute{resource_types: [\{type,image\}]}{
    \italic{Optional.} The set of resource types supported by the worker. If
    specified, the worker may be used for running resource containers of the
    given type, using the specified image URI.
  }
}

\section{Registering via the TSA}{registering-via-tsa}{
  Using the \code{/api/v1/workers} API directly is a bit inconvenient. Your
  workers need credentials for the ATC, and must advertise an address that the
  ATC can reach. The API consumer would also have to continuously heartbeat so
  long as the server it's advertising is healthy.

  A typical Concourse installation includes a component called the
  \reference{architecture-tsa}{TSA}. The TSA is used to securely register
  workers via SSH, and continuously health-check and heartbeat them to the ATC.
  These workers can come from any network that can reach the TSA, which is
  usually colocated with the ATC and possibly sitting behind the same load
  balancer (but on a different port, usually \code{2222}).

  This is slightly different from how most other CI systems work. Concourse
  inverts the dependency flow so that scaling up workers can be done easily
  without reconfiguring the ATC.

  This flow also makes it easier to securely register remote workers living in
  private networks. Rather than making the worker VM publicly reachable (very
  dangerous!) or using a VPN (a bit sketchy depending on where the ATC lives, and
  often error prone), workers can listen on \code{127.0.0.1} and forward their
  connections through the \reference{architecture-tsa}{TSA} via a reverse SSH
  tunnel.

  \section{Standalone binary workers}{
    If you're using the \reference{binaries}{standalone binaries}, the SSH
    aspect of worker registration is automated for you; you'll just need to
    generate a key pair for the worker and configure the workers with the
    expected TSA host key. See \reference{standalone-workers} for more details.

    If you're registering standalone binary-provisioned workers with a
    BOSH-deployed Concourse, you'll want to go through the
    \reference{configuring-bosh-tsa} section first.
  }

  \section{BOSH deployed workers}{bosh-deployed-workers}{
    \omit-children-from-table-of-contents

    If you have some other environment separate from your primary Concourse
    deployment, but still manageable by BOSH, configuration is done via
    properties, pointing at the main deployment.

    To BOSH deploy your workers, follow largely the same instructions as in
    \reference{clusters-with-bosh}, but you may strip things down a bit,
    e.g. don't bother deploying \code{tsa}, \code{atc}, or
    \code{postgresql} for your workers.

    If you're registering these workers workers with a BOSH-deployed Concourse,
    you'll want to go through the \reference{configuring-bosh-tsa} section
    first.

    You'll also need to configure the workers to register with your main
    cluster. The Concourse release includes a job called \code{groundcrew},
    which can be configured to register a (usually colocated) worker with a
    TSA.

    To configure Groundcrew, you may want to set some of the following
    properties:

    \definitions{
      \item{\code{tags}}{
        An array of tags to advertise for the worker. You'll probably want
        to specify this, so that only steps explicitly targeting the worker
        (via their own tags) run on it.
      }

      \item{\code{platform}}{
        The platform to advertise for the worker. Defaults to \code{linux}.
      }

      \item{\code{tsa.host}}{
        The address of the TSA server. This will probably be the address of
        your external Concourse cluster.
      }

      \item{\code{tsa.port}}{
        The port of the TSA server. Defaults to \code{2222}.
      }

      \item{\code{tsa.private_key}}{
        The private key to use when authenticating with the TSA. This must
        be authorized by the TSA in advance

        For more information, see \reference{configuring-bosh-tsa} for
        BOSH or \reference{generating-keys} for the standalone binaries.
      }

      \item{\code{tsa.host_public_key}}{
        The public key to expect when connecting to the TSA.

        For more information, see \reference{configuring-bosh-tsa} for
        BOSH or \reference{generating-keys} for the standalone binaries.
      }
    }

    Note that most properties have sane defaults. To see a full set of
    properties and what a manifest may look like when specifying them, browse
    around the docs at
    \hyperlink{http://bosh.io/releases/github.com/concourse/concourse}{bosh.io}.

    With the above properties, we know what kind of worker we'll be
    advertising, but not how the ATC will reach it. There are two options:
    either directly advertising an address reachable by the ATC, or by
    forwarding a local address via a reverse SSH tunnel to the TSA, who will
    then advertise its tunnelled address to the ATC.

    \section{Registering a worker directly}{
      To directly advertise an address to the TSA, set the following
      properties on the \code{groundcrew} job:

      \definitions{
        \item{\code{garden.address}}{
          The address of the Garden server to advertise to the TSA. Note that
          this must be the external address. If omitted, Groundcrew will
          automatically determine this address, so you probably won't need to
          specify it.
        }

        \item{\code{baggageclaim.address}}{
          The address of the Baggageclaim server to advertise to the TSA.
          Note that this must be the external address. If omitted, Groundcrew
          will automatically determine this address, so you probably won't
          need to specify it.
        }
      }

      You would do this if your worker is not reachable by the outside world,
      but \italic{is} reachable by the ATC. For example, a separate
      deployment within the same VPC. (Note: making a Garden server publicly
      reachable is a very bad idea.)
    }

    \section{Forwarding a local Garden server}{
      To forward a local Garden server through the TSA, set the following
      properties on the \code{groundcrew} job:

      \definitions{
        \item{\code{garden.forward_address}}{
          The locally-reachable Garden address to forward through the TSA,
          e.g.  \code{127.0.0.1:7777}.
        }

        \item{\code{baggageclaim.forward_address}}{
          The locally-reachable Baggageclaim address to forward through the
          TSA, e.g. \code{127.0.0.1:7788}.
        }
      }

      You would do this if your worker lives in a private network (e.g. a
      local cluster), but your TSA is publicly reachable (which is much
      safer).
    }
  }
}
