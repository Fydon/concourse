#language anatomy

\use{\load{concourse/docs}}

\template{\load{concourse/docs-template}}

\title{\code{jobs}\aux{: Plans to execute against resources}}{configuring-jobs}

\reference{jobs}{Jobs} determine the \italic{actions} of your pipeline, how
resources progress through it, and how everything is visualized. They are
listed under the \code{jobs} key in the pipeline configuration.

The following example defines a simple unit-level job that will trigger
whenever new code arrives at the \code{concourse} resource:

\codeblock{yaml}{
jobs:
- name: atc-unit
  plan:
  - get: concourse
  - task: unit
    file: concourse/ci/atc.yml
}

Each configured job consists of the following attributes:

\define-attribute{name: string}{
  \italic{Required.} The name of the job. This should be short; it will show up
  in URLs.
}

\define-attribute{serial: boolean}{
  \italic{Optional. Default \code{false}.} If set to \code{true}, builds will
  queue up and execute one-by-one, rather than executing in parallel.
}

\define-attribute{build_logs_to_retain: number}{
  \italic{Optional.} If configured, only the last specified number of builds
  will have their build logs persisted. This is useful if you have a job that
  runs periodically but after some amount of time the logs aren't worth keeping
  around.

  Example:

  \codeblock{yaml}{
  jobs:
  - name: smoke-tests
    build_logs_to_retain: 100
    plan:
    - get: 10m
    - task: smoke-tests
      # ...
  }
}

\define-attribute{serial_groups: [string]}{
  \italic{Optional. Default \code{[]}.} When set to an array of arbitrary
  tag-like strings, builds of this job and other jobs referencing the same
  tags will be serialized.

  This can be used to ensure that certain jobs do not run at the same time,
  like so:

  \codeblock{yaml}{
  jobs:
  - name: job-a
    serial_groups: [some-tag]
  - name: job-b
    serial_groups: [some-tag, some-other-tag]
  - name: job-c
    serial_groups: [some-other-tag]
  }

  In this example, \code{job-a} and \code{job-c} can run concurrently, but
  neither job can run builds at the same time as \code{job-b}.

  The builds are executed in their order of creation, across all jobs with
  common tags.
}

\define-attribute{max_in_flight: integer}{
  \italic{Optional.} If set, specifies a maximum number of builds to run at a
  time. If \code{serial} or \code{serial_groups} are set, they take precedence
  and force this value to be \code{1}.
}

\define-attribute{public: boolean}{
  \italic{Optional. Default \code{false}.} If set to \code{true}, the build log
  of this job will be viewable by unauthenticated users. Unauthenticated users
  will always be able to see the inputs, outputs, and build status history of a
  job. This is useful if you would like to expose your pipeline publicly without
  showing sensitive information in the build log.
}

\define-attribute{disable_manual_trigger: boolean}{
  \italic{Optional. Default \code{false}.} If set to \code{true}, manual
  triggering of the job (via the web UI or \reference{fly-trigger-job}) will be
  disabled.
}

\define-attribute{interruptible: boolean}{
  \italic{Optional. Default \code{false}.} Normally, when a worker is shutting
  down it will wait for builds with containers running on that worker to finish
  before exiting. If this value is set to \code{true}, the worker will not wait
  on the builds of this job. You may want this if e.g. you have a
  self-deploying Concourse or long-running-but-low-importance jobs.
}

\define-attribute{on_success: step}{job-on-success}{
  \italic{Optional.} Step to execute when the job succeeds. Equivalent to the
  \reference{on_success} step attribute.
}

\define-attribute{on_failure: step}{job-on-failure}{
  \italic{Optional.} Step to execute when the job fails. Equivalent to the
  \reference{on_failure} step attribute.
}

\define-attribute{ensure: step}{job-ensure}{
  \italic{Optional.} Step to execute regardless of whether the job succeeds,
  fails, or errors. Equivalent to the \reference{ensure} step attribute.
}

\define-attribute{plan: [step]}{
  \italic{Required.} The \reference{build-plans}{Build Plan} to execute.
}
