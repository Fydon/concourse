#language anatomy

\use{\load{concourse/splash}}

\template{\load{concourse/splash-template}}

\set-title{Concourse\aux{: CI that scales with your project}}{index}

\mobile-optimized

\value-prop-left{Simple and Scalable}{value_prop_simple_f2}{
  Rather than a myriad of checkboxes, pipelines are defined as a single
  declarative config file, composing together just \reference{concepts}{three
  core concepts}.
}{
  As your project grows, your pipeline will grow with it, and remain
  understandable.
}

\value-prop-right{Streamlined UI}{value_prop_streamlined_f2}{
  Concourse's user interface helps you find out what you need to know about
  your builds as quickly as possible.
}{
  For a live example, see \hyperlink{https://ci.concourse.ci}{Concourse's own
  pipeline}.
}

\value-prop-left{Dependable Results}{value_prop_repeatable_f2}{
  Concourse controls the inputs to your pipeline so that the results are
  repeatable every time.
}{
  Rather than sharing state, every \reference{running-tasks}{task} runs in its
  own container, controlling its own dependencies.
}{
  Local changes can be tested with \reference{fly-execute}{the Fly CLI},
  allowing you to see if they would succeed or fail in your pipeline ahead of
  time.
}

\value-prop-right{Integrations}{value_prop_integrations_f24}{
  Interacting with the world is a crucial part of any pipeline.
  Concourse expresses these interactions as \reference{resources}{Resources},
  allowing you to delete your boring plumbing code and focus on your
  interesting code instead.
}{
  Concourse works out-of-the-box with Git repositories, S3 buckets, and other
  common external services. \reference{resource-types}{Custom resource types}
  allow you to extend your pipeline with support for anything else.
}

\getting-started{Getting Started Takes 5 Minutes}{
  \list{
    \step-with-line{3{\newline}min}{Vagrant Up}{
      \code-lines{bash}{
        vagrant init concourse/lite  # creates ./Vagrantfile
      }{
        vagrant up                   # downloads the box and spins up the VM
      }

      The web server will be running at
      \hyperlink{http://192.168.100.4:8080}{192.168.100.4:8080}.
    }

    \step{1{\newline}min}{Save hello.yml with this example pipeline:}{
      \code-window{yaml}{
        jobs:
        - name: hello-world
          plan:
          - task: say-hello
            config:
              platform: linux
              image_resource:
                type: docker-image
                source: \{repository: ubuntu\}
              run:
                path: echo
                args: ["Hello, world!"]
      }
    }

    \step{1{\newline}sec}{Push to Concourse}{
      \code-lines{bash}{
        fly -t lite login -c http://192.168.100.4:8080
      }{
        fly -t lite set-pipeline -p hello-world -c hello.yml
      }

      If you refresh the \hyperlink{http://192.168.100.4:8080}{main page}, you
      should now see the world's tiniest pipeline!
    }
  }

  \coffee
}

\truitt{Come fly the friendly CI!}{
  \reference{introduction}{\blue-button{Get Started}}
}

\slack{
  To chit chat, ask for help, or offer your own, join us in \reference{slack-blurb}{Slack}.
}

\include-section{./introduction.any}
\include-section{./setting-up.any}
\include-section{./using-concourse.any}
\include-section{./community.any}
\include-section{./downloads.any}
\include-section{./trademarks.any}

\table-of-contents
